Exercise 1.1
2. C-s P U B L I C enter
3. C-s L a b o r a t o r y enter
4. C-s s e l f - r e f e r e n t i a l enter
5. C-s a r r o w enter
6. C-e
7. C-a
8. I used the commands available in emacs.
9. N/A
10. C-x C-c

Exercise 1.2
2. C-u 1 8 C-n C-k
3. C-s D E L E T E M E Enter C-a C-k
4. C-s h t t p s : / / e n  C-a C-k
5. C-s < ! Enter C-k C-s < ! Enter C-k

Exercise 1.3
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 37 Enter y y
3. M-% U T F - 8 Enter U S - A S C I I Enter y 
4. M-< C-s < / o l > C-a Enter
5. C-x C-s C-x C-c

Exercise 1.4
1. cat e x e r 2 . h t m l e x e r 2 . d i f f > e x e r 4 . h t m l
2. emacs e x e r 4 . h t m l
3. M-> C-u 2 5 C-p C-f C-SP C-u 3 5 C-f M-g g 9 3 Enter C-y
4. M-> C-u 2 5 C-p C-f C-SP C-u 3 5 C-f M-g g 9 3 Enter C-y
M-> C-u 2 5 C-p C-f C-SP C-u 3 5 C-f M-g g 9 3 Enter C-y
M-> C-u 3 6 C-p C-f C-SP C-u C-n C-u 6 C-f M-w M-g g 18 Enter C-y
5. M-> C-u 4 2 C-p C-u 4 2 C-k
6. C-x u
7. < ! - - Enter M-% - - > Enter SP Enter y y y y M-> - - >
8. M-< M-% < o l > Enter < O l > Enter !
9. C-x C-s C-x C-c

Exercise 1.5
1. M-x make-directory Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c C-x C-s
3. M-x compile Enter ./hello Enter
4. C-x C-c ./hello > hello-out Enter
5. #include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = \
'%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b,\
 n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6
1. e m a c s C-x b Enter
2. C-x b Enter (random t) C-j
3. (setq x (random)) C-j Enter (setq y (random)) C-j Enter
4. ( * x y )
5. M-: ( * x y ) Enter
6. Two random integers are not truly random because the set of integers spans from negative infinity to positive infinity but because of the limitation of computation and human perception, we cannot adequately represent the entire set of integers.
7. The probability is 1/2^w where w is the number of bits in an integer. A wrong result will occur only when overflow occurs so I calculated the probability of an overflow happening. 
